---
- name: Check if K3s is running
  systemd:
    name: k3s
    state: started
  become: yes

- name: Wait for K3s API to be ready
  wait_for:
    port: 6443
    host: 127.0.0.1
    delay: 10
    timeout: 300

- name: Check cluster nodes status
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl get nodes
  become: yes
  register: nodes_status

- name: Display nodes status
  debug:
    var: nodes_status.stdout_lines

- name: Check if Cilium is installed
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl get pods -n kube-system -l k8s-app=cilium --no-headers | wc -l
  become: yes
  register: cilium_check

- name: Fail if Cilium is not installed
  fail:
    msg: "Cilium CNI must be installed before deploying the dashboard. Run: cd iac_k8 && pulumi up"
  when: cilium_check.stdout | int == 0

- name: Download Kubernetes Dashboard manifest
  get_url:
    url: https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
    dest: /tmp/kubernetes-dashboard.yaml
    mode: '0644'
  become: yes

- name: Apply Kubernetes Dashboard manifest
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl apply -f /tmp/kubernetes-dashboard.yaml
  become: yes

- name: Create dashboard admin user manifest
  copy:
    content: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: admin-user
        namespace: kubernetes-dashboard
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: admin-user
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: admin-user
        namespace: kubernetes-dashboard
    dest: /tmp/dashboard-admin-user.yaml
    mode: '0644'

- name: Apply dashboard admin user
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl apply -f /tmp/dashboard-admin-user.yaml
  become: yes

- name: Check dashboard pods status
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl get pods -n kubernetes-dashboard
  become: yes
  register: dashboard_pods
  ignore_errors: yes

- name: Display dashboard pods status
  debug:
    var: dashboard_pods.stdout_lines

- name: Check for pod events
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl get events -n kubernetes-dashboard --sort-by='.lastTimestamp' | tail -20
  become: yes
  register: dashboard_events
  ignore_errors: yes

- name: Display dashboard events
  debug:
    var: dashboard_events.stdout_lines

- name: Wait for dashboard deployment to be ready
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl rollout status deployment/kubernetes-dashboard -n kubernetes-dashboard --timeout=300s
  become: yes
  retries: 3
  delay: 30

- name: Create dashboard ingress manifest
  copy:
    content: |
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: kubernetes-dashboard
        namespace: kubernetes-dashboard
        annotations:
          kubernetes.io/ingress.class: "cilium"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
      spec:
        rules:
        - host: dashboard.metatao.net
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: kubernetes-dashboard
                  port:
                    number: 443
    dest: /tmp/dashboard-ingress.yaml
    mode: '0644'

- name: Apply dashboard ingress
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl apply -f /tmp/dashboard-ingress.yaml
  become: yes

- name: Get admin user token
  shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    /usr/local/bin/kubectl -n kubernetes-dashboard create token admin-user --duration=87600h
  become: yes
  register: dashboard_token

- name: Save dashboard token to file
  local_action:
    module: copy
    content: |
      Kubernetes Dashboard Access Information
      =======================================
      
      URL: https://dashboard.metatao.net
      
      Token:
      {{ dashboard_token.stdout }}
      
      Note: This token is valid for 10 years. Keep it secure!
    dest: ~/k3s-dashboard-token.txt
    mode: '0600'
  become: no

- name: Display dashboard access information
  debug:
    msg:
      - "Kubernetes Dashboard has been deployed!"
      - "Access URL: https://dashboard.metatao.net"
      - "Token saved to: ~/k3s-dashboard-token.txt"
      - "Use the token to login to the dashboard"